# Docker
# Build and push an image to Azure Container Registry
# https://docs.microsoft.com/azure/devops/pipelines/languages/docker

trigger:
  branches:
    include:
    - '*'
    exclude:
    - dev

resources:
- repo: self

variables:
  # Container registry service connection established during pipeline creation
  imageRepository: 'artus_frontend'
  containerRegistry: 'artusrcs.azurecr.io'
  dockerfilePath: '$(Build.SourcesDirectory)/Dockerfile'
  tag: '$(Build.BuildId)'
  branch: '$(Build.SourceBranchName)'
  commit: '$(Build.SourceVersion)'
  buildUri: '$(Build.BuildUri)'
  # Agent VM image name
  vmImageName: 'ubuntu-latest'
  # dockerRegistryServiceConnection: rcs-acr
  # relizaApiKeyId: PROJECT__f3860227-ec0e-4fd2-8db6-b3c762d0c8ed
  # relizaApiKey: 3a916289590fbed937c1ad2d8cf9b777605b93e112287ed72da462039210eca1ed7ccb226e92e4eb9195d335187abc4c
stages:
- stage: Build
  displayName: Build and push stage
  jobs:
  - job: Build
    displayName: Build
    pool:
      vmImage: $(vmImageName)
    steps:
    - bash: |
        curl -o /tmp/rearm.zip https://d7ge14utcyki8.cloudfront.net/rearm-download/24.11.6/rearm-24.11.6-linux-386.zip
        ls /tmp

    # Record build start
    # - bash: |
    #     BUILD_START=$(date -Iseconds)
    #     echo "##vso[task.setvariable variable=BUILD_START]$BUILD_START"
    # # Checkout current repository
    # - checkout: self
    # # Get Version From Reliza Hub | Extract Last Release Commit And Prepare List Of Commits
    # - bash: |
    #     docker pull relizaio/jq
    #     mkdir -p $(Pipeline.Workspace)/variables
    #     # extract last release commit and prepare list of commits
    #     last_commit=$(docker run --rm relizaio/reliza-cli getlatestrelease -k $RELIZA_API_KEY -i $RELIZA_API_KEY_ID --branch "$(branch)" | jq -r ".sourceCodeEntryDetails.commit")
    #     echo "Last Commit: $last_commit"
    #     if [[ ! -z "$last_commit" ]]
    #     then
    #       echo -n "--commits $(git log -100 $last_commit..$(commit) --date=iso-strict --pretty='%H|||%ad|||%s' | base64 -w 0) " > $(Pipeline.Workspace)/variables/GET_VERSION
    #     fi
    #     echo "Getting version from Reliza Hub"
    #     echo -n "-k $RELIZA_API_KEY -i $RELIZA_API_KEY_ID -b \"$(branch)\" --metadata azuredevops$(tag) \
    #       --commit $(commit) --commitmessage \"$(git log -1 --pretty='%s')\" --date $(git log -1 --date=iso-strict --pretty='%ad') --vcstype git " >> $(Pipeline.Workspace)/variables/GET_VERSION
    #     # debug
    #     echo "DEBUG GET VERSION COMMAND: $(cat $(Pipeline.Workspace)/variables/GET_VERSION)"
    #     # get version
    #     echo -n "docker run --rm relizaio/reliza-cli getversion $(cat $(Pipeline.Workspace)/variables/GET_VERSION) " > $(Pipeline.Workspace)/variables/GET_VERSION_EXEC
    #     reliza_ver=$(eval "$(cat $(Pipeline.Workspace)/variables/GET_VERSION_EXEC)")
    #     full_ver=$(echo $reliza_ver | jq -r ".version")
    #     echo "extracted full version: $full_ver"
    #     short_ver=$(echo $reliza_ver | jq -r ".dockerTagSafeVersion")
    #     echo "extracted docker tag safe version: $short_ver"
    #     echo "$full_ver" > $(Pipeline.Workspace)/variables/RLZ_FULL_VER
    #     echo "$short_ver" > $(Pipeline.Workspace)/variables/RLZ_SHORT_VER
    #   env: 
    #     RELIZA_API_KEY: $(relizaApiKey)
    #     RELIZA_API_KEY_ID: $(relizaApiKeyId)

    #   displayName: Get Version From Reliza Hub
    # - task: Docker@2
    #   displayName: Login to ACR
    #   inputs:
    #     command: login
    #     containerRegistry: $(dockerRegistryServiceConnection)
    # - bash: echo "--status rejected " > $(Pipeline.Workspace)/variables/RELIZA_COMMAND
    #   displayName: Instantiate Reliza Status as Rejected to handle possible build failure
    # - bash: |
    #     exit_code=0
    #     exit_code1=0
    #     safebranch=$(echo "$(branch)" | awk '{gsub(/\//,"_")}1')
    #     docker run --privileged --rm tonistiigi/binfmt --install all
    #     docker buildx build --platform linux/amd64 \
    #       --cache-from $(containerRegistry)/$(imageRepository):amd64 \
    #       --build-arg CI_ENV=azuredevops$(tag) --build-arg GIT_COMMIT=$(commit) --build-arg GIT_BRANCH="$(branch)" \
    #       --build-arg VERSION=$(cat $(Pipeline.Workspace)/variables/RLZ_FULL_VER) -f ./Dockerfile \
    #       -t $(containerRegistry)/$(imageRepository):amd64 . || exit_code=$(echo $?)
    #     docker push $(containerRegistry)/$(imageRepository):amd64 || exit_code=$(echo $?)
    #     # copy produced html to later use in arm
    #     docker run --name copy-container --entrypoint sleep -d $(containerRegistry)/$(imageRepository):amd64 600
    #     docker cp copy-container:/usr/share/nginx/html ./html
    #     docker buildx build --platform linux/arm64/v8 \
    #       --cache-from $(containerRegistry)/$(imageRepository):armv8 \
    #       --build-arg CI_ENV=azuredevops$(tag) --build-arg GIT_COMMIT=$(commit) --build-arg GIT_BRANCH="$(branch)" \
    #       --build-arg VERSION=$(cat $(Pipeline.Workspace)/variables/RLZ_FULL_VER) -f ./Dockerfile.arm \
    #       -t $(containerRegistry)/$(imageRepository):armv8 . || exit_code=$(echo $?)
    #     docker push $(containerRegistry)/$(imageRepository):armv8 || exit_code=$(echo $?)
    #     failedbuild=0
    #     if [[ $exit_code -eq 0 && $exit_code1 -eq 0 ]]
    #     then
    #         # set reliza release status to complete
    #         echo "--status complete " > $(Pipeline.Workspace)/variables/RELIZA_COMMAND
    #         docker manifest create $(containerRegistry)/$(imageRepository) $(containerRegistry)/$(imageRepository):armv8 $(containerRegistry)/$(imageRepository):amd64
    #         docker manifest create $(containerRegistry)/$(imageRepository):$safebranch $(containerRegistry)/$(imageRepository):armv8 $(containerRegistry)/$(imageRepository):amd64
    #         docker manifest create $(containerRegistry)/$(imageRepository):$(cat $(Pipeline.Workspace)/variables/RLZ_SHORT_VER) $(containerRegistry)/$(imageRepository):armv8 $(containerRegistry)/$(imageRepository):amd64
    #         # push to registry and stream data to Reliza Hub
    #         echo -n "--artid $(containerRegistry)/$(imageRepository):$safebranch " >> $(Pipeline.Workspace)/variables/RELIZA_COMMAND
    #         echo -n "--artbuildid azuredevops$(tag) " >> $(Pipeline.Workspace)/variables/RELIZA_COMMAND
    #         echo -n "--artbuilduri $(buildUri) " >> $(Pipeline.Workspace)/variables/RELIZA_COMMAND
    #         echo -n "--artcimeta azuredevops " >> $(Pipeline.Workspace)/variables/RELIZA_COMMAND
    #         echo -n "--tagkey deployable " >> $(Pipeline.Workspace)/variables/RELIZA_COMMAND
    #         echo -n "--tagval true " >> $(Pipeline.Workspace)/variables/RELIZA_COMMAND
    #         echo -n "--arttype Docker " >> $(Pipeline.Workspace)/variables/RELIZA_COMMAND
    #         echo "DEBUG push branch version: docker push $(containerRegistry)/$(imageRepository):$safebranch"
    #         docker_sha_256=$(docker manifest push $(containerRegistry)/$(imageRepository):$safebranch | grep sha256 | cut -f 3 -d ' ')
    #         if [[ $docker_sha_256 != "" ]]
    #         then
    #           echo "DEBUG docker_sha_256 $cat($docker_sha_256)"
    #           echo -n "--artdigests $docker_sha_256 " >> $(Pipeline.Workspace)/variables/RELIZA_COMMAND
    #         fi
    #         # push versioned tag
    #         echo "DEBUG versioned tag: $(containerRegistry)/$(imageRepository):$(cat $(Pipeline.Workspace)/variables/RLZ_SHORT_VER)"
    #         docker push $(containerRegistry)/$(imageRepository):$(cat $(Pipeline.Workspace)/variables/RLZ_SHORT_VER)
    #         if [ "$(branch)" == "master" ]
    #         then
    #           echo "DEBUG if we are on master, also push latest"
    #           docker push $(containerRegistry)/$(imageRepository):latest
    #         fi
    #     else
    #         failedbuild=1
    #     fi
    #     echo -n "-b \"$(branch)\" -k $RELIZA_API_KEY -i $RELIZA_API_KEY_ID -v $(cat $(Pipeline.Workspace)/variables/RLZ_FULL_VER) " >> $(Pipeline.Workspace)/variables/RELIZA_COMMAND
    #     echo -n "--datestart $BUILD_START " >> $(Pipeline.Workspace)/variables/RELIZA_COMMAND
    #     echo -n "--dateend $(date -Iseconds) " >> $(Pipeline.Workspace)/variables/RELIZA_COMMAND
    #     # debug
    #     echo "DEBUG reliza command: $(cat $(Pipeline.Workspace)/variables/RELIZA_COMMAND)"
    #     # send data to Reliza Hub
    #     echo docker run --rm relizaio/reliza-cli addrelease $(cat $(Pipeline.Workspace)/variables/RELIZA_COMMAND) > $(Pipeline.Workspace)/variables/RLZ_CMD_EXEC
    #     eval $(cat $(Pipeline.Workspace)/variables/RLZ_CMD_EXEC)
    #     if [[ $failedbuild -eq 1 ]]
    #     then
    #       echo "Build failed: see errors above"
    #       exit 1
    #     fi
    #   env: 
    #     RELIZA_API_KEY: $(relizaApiKey)
    #     RELIZA_API_KEY_ID: $(relizaApiKeyId)
    #   displayName: Build and push image to ACR
